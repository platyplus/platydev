# global:
#   hostname: example.com   

hasura-backend-plus:
  enabled: true
  imageConfig:
    repository: platyplus/tilehuria-hbp
    tag: latest
    pullPolicy: IfNotPresent
  extraEnv: 
    - name: AUTO_MIGRATE
      value: "false"
    - name: S3_SSL_ENABLED
      value: "false"

  # cert:
    # email: pilou@platyplus.io
    # letsencrypt: production # staging or production

  minio:
    enabled: true
    defaultBuckets: tilehuria
    # TODO PART OF SKAFFOLD CONFIG
    accessKey: 
      password: <minio-access-key>
    secretKey:
      password: <minio-secret-key>

hasura:
  enabled: true
  imageConfig:
    repository: platyplus/tilehuria-hasura
    tag: latest
    pullPolicy: IfNotPresent
  # adminSecret: <long complicated admin key>
  # jwt: 
  #   key: <long complicated jwt key>
  #   algorithm: HS256
  # postgresql:
  #   postgresqlDatabase: tilehuria
    # postgresqlPassword: <secret-postgresql-password>
  extraEnv:
    - name: HOOKS_URL
      value: "http://{{ .Release.Name }}-hooks"
    - name: EVENT_AOI
      value: "http://{{ .Release.Name }}-hooks/events/area-of-interest"
    - name: EVENT_TILE_SET
      value: "http://{{ .Release.Name }}-hooks/events/tile-set"
    # HOOKS_REMOTE_SCHEMA: "http://{{ .Release.Name }}-hooks/graphql"

web:
  enabled: true
  imageConfig:
    tag: latest
    pullPolicy: IfNotPresent
  ingress:
    enabled: true

rabbitmq:
  enabled: true
  # auth:
  #   username: user
  #   password: <secret-rabbitmq-password>

hooks:
  enabled: true
  imageConfig:
    tag: latest
    pullPolicy: IfNotPresent
  extraEnv:
    - name: RABBITMQ_HOST
      value: "{{ .Release.Name }}-rabbitmq"
    - name: RABBITMQ_DEFAULT_USER
      valueFrom:
        configMapKeyRef:
          name: "{{ .Release.Name }}-rabbitmq"
          key: username
    - name: RABBITMQ_DEFAULT_PASS
      valueFrom:
        secretKeyRef:
          name: "{{ .Release.Name }}-rabbitmq"
          key: rabbitmq-password
    - name: HASURA_ENDPOINT
      valueFrom:
        configMapKeyRef:
          name: "{{ .Release.Name }}-hasura"
          key: endpoint
    - name: HASURA_GRAPHQL_ADMIN_SECRET
      valueFrom:
        secretKeyRef:
          name: "{{ .Release.Name }}-hasura"
          key: adminSecret

worker:
  enabled: true
  imageConfig:
    tag: latest
    pullPolicy: IfNotPresent
  extraEnv:
    - name: S3_ENDPOINT
      valueFrom:
        configMapKeyRef:
          name: "{{ .Release.Name }}-minio"
          key: endpoint
    - name: S3_BUCKET
      valueFrom:
        configMapKeyRef:
          name: "{{ .Release.Name }}-minio"
          key: defaultBuckets
    - name: S3_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: "{{ .Release.Name }}-minio"
          key: access-key
    - name: S3_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: "{{ .Release.Name }}-minio"
          key: secret-key
    - name: RABBITMQ_HOST
      value: "{{ .Release.Name }}-rabbitmq"
    - name: RABBITMQ_DEFAULT_USER
      valueFrom:
        configMapKeyRef:
          name: "{{ .Release.Name }}-rabbitmq"
          key: username
    - name: RABBITMQ_DEFAULT_PASS
      valueFrom:
        secretKeyRef:
          name: "{{ .Release.Name }}-rabbitmq"
          key: rabbitmq-password
    - name: HASURA_ENDPOINT
      valueFrom:
        configMapKeyRef:
          name: "{{ .Release.Name }}-hasura"
          key: endpoint
    - name: HASURA_GRAPHQL_ADMIN_SECRET
      valueFrom:
        secretKeyRef:
          name: "{{ .Release.Name }}-hasura"
          key: adminSecret
  
